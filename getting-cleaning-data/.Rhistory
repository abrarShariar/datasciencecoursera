swirl()
rm(list=ls())
swirl()
1
swirl()
library(swirl())
swirl()
swirl()
dice_sqr
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - 3.5^2
sum(dice_sqr * dice_high) - edh^2
sd(apply(matrix(rnorm(10000), 1000), 1, mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(rnorm(10000), 1000), 1, mean))
sd(apply(matrix(runif(10000), 1000), 1, mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4), 1000), 1, mean))
1(2*sqrt(10))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
swirl()
0
0
quit
exit
0
# Run app ----
shinyApp(ui, server)
quit
quit()
ls
library(swirl())
swirl()
library(swirl())
swirl()
pbinom(3, size=5, prob=.8)
choose(5,3)*(.8)^3*(.2)^(5-3) + choose(5,4)*(.8)^4*(.2)^(5-4) + choose(5,5)*(.8)^5*(.2)^(5-5)
pbinom(2, size=5, prob=.8, lower.tail = FALSE)
qnorm(prob=.01)
qnorm(.01)
qnorm(.1)
0
qnorm(97.5, mean=3, sd=2)
qnorm(.975, mean=3, sd=2)
1
1.96 * 2 + 3
pnorm(quantile=1200, mean=1020, sd=50)
pnorm(1200, mean=1020, sd=50)
pnorm(1200, mean=1020, sd=50, lower.tail = FALSE)
pnorm(1200, mean=1020, sd=50, lower.tail = FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75, mean=1020, sd=50)
53
pnorm(qnorm(.53))
qnorm(pnorm(.53))
ppois(3, mean=(2.5 * 4),lower.tail = TRUE, log.p = FALSE)
ppois(3, mean=(2.5 * 4),lower.tail = TRUE, log.p = FALSE)
ppois(3,lower.tail = TRUE, log.p = FALSE)
ppois(3, lambda=(2.5* 4), lower.tail = TRUE, log.p = FALSE)
ppois(3,2.5 * 4)
pbinom(.01, 5, 1000)
pbinom(5,1000,.01)
ppois(5, lambda = 1000 * .01)
pnorm(70,mean=80, sd=10)
qnorm(.95,mean=1100, sd=75)
qnorm(0.95,mean=1100, sd=75, size=100)
ppois(10,lambda=5*3)
1-ppois(10,lambda=5*3)
swirl()
coinPlot(10)
coinPlot(1000)
coinPlot(10000)
qnotm(.95)
qnorm(.95)
+ qnorm(.975)*sqrt(p'(1-p')/100)
qnorm(.975)*sqrt(p'(1-p')/100)
1.96 + qnorm(.975)*sqrt(1.96(1-1.96)/100)
1.96 + qnorm(.975)*sqrt(1.96(1-1.96)/100)
1.9
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
x$conf.int
10$conf.int
a
1
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb = 5/94.32
lamb <- 5/94.32
12
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
library(swirl())
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, -(r_arch:country))
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(1:length(cran)))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, users %in% "India")
filter(cran, country %in% "India")
filter(cran, r_version <= "3.0.2",country == "India")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500 ,r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran, package, ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
head(cran3)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_gb = size_mb/2^10)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes=mean(size))
library(dplyr)
cran <- tbl_df(cran)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
?n
submit()
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count()))
top_counts_sorted <- arrange(top_counts, desc(count)
top_counts_sorted <- arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs - 0.99)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
?mutate()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, key=sex_class, value=count)
res <- gather(students2, key=sex_class, count, -grade)
res
?separate
separate(res, sex_class, into=c("sex", "class"))
submit()
students3
submit()
?spread
submit()
students3
res <- gather(students2, key=sex_class, count, -grade
;l;
submit()
students3
submit()
submit()
submit()
head(students)
head(students3)
submit()
head(students3)
submit()
submit()
submit()
?spread
submit()
?spread
head(students3)
res <- gather(students2, key=sex_class, count, -grade)
res
head(students3)
submit()
submit()
submit()
library(swirl())
swirl()
myplot(2)
myplot)20_
myplot(20)
myplot2(2)
qt(.975, 2)
myplot2(20)
sleep
range(g1)
range(g2)
g1 - g2
difference <- g2 - g1
mean(difference)
s <- sd(difference)
mn c(-1,1) qt(.975, 9) * sd(difference)/sqrt(10)
mn (c(-1,1) qt(.975, 9) * sd(difference)/sqrt(10))
mn* (c(-1,1) qt(.975, 9) * sd(difference)/sqrt(10))
mn* (c(-1,1) * qt(.975, 9) * sd(difference)/sqrt(10))
mn + (c(-1,1) * qt(.975, 9) * sd(difference)/sqrt(10))
mn + (c(-1,1) * qt(.975, 9) * s/sqrt(10))
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
x$conf.init
x$conf.int
t.test(difference)$conf.int
sp <- (7)*(15.34)^2 + (20)*(18.23)^2
ns <- 27
sp <- sqrt(sp/ns)
((132.86)-(127.44)) + c(1,-1) + qt(.95, ns) * s/sqrt(ns+1)
((132.86)-(127.44)) + c(1,-1) + qt(.95, ns) * s/sqrt(ns+2)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sqrt((var(g1)+var(g2))/18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
sp <- sqrt((9*var(md)+9*var(md))/18)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g1,g2, paired=FALSE, var.equal = TRUE)$conf
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
num <- (15.34^(2/8) + 18.23^(2/21))^2
num <- (15.34^2/8 + 18.23^2/21)^2
123
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf <- num/den
123
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)\
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
n <- 9
a <- 1100
s <- 30
error <- qt(0.95, df = n-1)*s/sqrt(n)
error
a-error
a+error
library(swirl())
swirl()
Sys.getlocale("LC_TIME")
ls
setwd("~/github/datasciencecoursera/getting-cleaning-data")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="housing.csv", method="curl")
data <- read.csv("housing.csv")
head(data)
names(data)
strsplit(names(data), "wgtp")
strsplit(names(data), "wgtp")[[123]]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="gdp.csv", method="curl")
data <- read.csv("gdp.csv")
head(data)
data <- read.csv("gdp.csv", skip="4", header=TRUE)
data
head(data)
gdp <- data[,"X.4"]
gdp
head(gdp)
class(gdp)
gdp != " "
gdp == " "
is.na(gdp)
length(is.na(gdp))
as.numeric(gdp)
?gsub
gsub(",","", gdp)
as.numeric(gsub(",","", gdp))
mean(as.numeric(gsub(",","", gdp)))
is.na(as.numeric(gsub(",","", gdp)))
!is.na(as.numeric(gsub(",","", gdp)))
gsub[!is.na(as.numeric(gsub(",","", gdp)))]
gsub[!is.na(as.numeric(gsub(",","", gdp))),]
which(!is.na(as.numeric(gsub(",","", gdp))))
gdp
which(!is.na(gdp))
gdp[which(!is.na(gdp))]
gdp <- gdp[which(!is.na(gdp))]
head(gdp)
tail(gdp)
as.numeric(gdp)
mean(as.numeric(gdp))
gdp
gdp
gsub(",","",gdp)
gdp <- gsub(",","",gdp)
gdp
gdp != ""
which(gdp != "")
gdp[which(gdp != "")]
gdp[which(gdp != "" & gdp !="..")]
as.numeric(gdp[which(gdp != "" & gdp !="..")])
mean(as.numeric(gdp[which(gdp != "" & gdp !="..")]))
data <- read.csv("gdp.csv", skip="4", header=TRUE)
head(data)
data <- data[, c(1,2,4,5)]
data
head(data)
gdp <- data[,"X.4"]
gdp
gsub("..", "", gdp)
gdp
head(gdp)
gsub("", "", gdp)
gsub("..", "", gdp)
gsub("", "", gdp)
gsub("", "0", gdp)
gdp
gsub(",", "", gsub)
gsub(",", "", gdp)
as.numeric(gsub(",", "", gdp))
!is.na(as.numeric(gsub(",", "", gdp)))
which(!is.na(as.numeric(gsub(",", "", gdp))))
gsub[which(!is.na(as.numeric(gsub(",", "", gdp))))]
gdp[which(!is.na(as.numeric(gsub(",", "", gdp))))]
as.numeric(gsub(",", "", gdp)))
as.numeric(gsub(",", "", gdp))
as.numeric(gsub(",", "", gdp)) & gdp != "NA"
as.numeric(gsub(",", "", gdp)) & !is.na(gdp)
gdp[as.numeric(gsub(",", "", gdp)) & !is.na(gdp)]
as.numeric(gsub(",", "", gdp))
gdp <- as.numeric(gsub(",", "", gdp))
gdp
class(gdp)
!is.na(gdp)
which(!is.na(gdp))
gdp[which(!is.na(gdp))]
gdp[which(!is.na(gdp))]
average(gdp[which(!is.na(gdp))])
sum(gdp[which(!is.na(gdp))])
sum(gdp[which(!is.na(gdp))])/190
sum(gdp[which(!is.na(gdp)),])/190
sum(gdp[,which(!is.na(gdp))])/190
data <- read.csv("gdp.csv", skip="4", header=TRUE)
data
head(data)
country <- data["X.3"]
country
head(country)
grep("^United", country)
grep("^United", country[X.3])
grep("^United", country[,X.3])
grep("^United", country[,"X.3"])
country[,"X.3"]
country$X.3
grep("^United",country$X.3)
data <- read.csv("gdp.csv", skip="4", header=TRUE)
head(data)
grep("^", data$X.3)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="edu.csv", method="curl")
edu_data <- read.csv("edu.csv")
head(edu_data)
head(data)
gdp_data <- data
colnames(gdp_data) <- c("country_code", "rank", "x", "country")
head(gdp_data)
gdp_data <- gdp_data[,c(1,2,4)]
head(gdp_data)
head(edu_data)
names(edu_data)
merge(edu_data, gdp_data, by.x="CountryCode", by.y="country_code")
merge_data <- merge(edu_data, gdp_data, by.x="CountryCode", by.y="country_code")
head(merge_data)
names(merge_data)
merge_data$National.accounts.base.year
merge_data$National.accounts.reference.year
merge_data$National.accounts.base.year
str(data)
str(merge_data)
names(merge_data)
merge_data$National.accounts.base.year
merge_data$PPP.survey.year
merge_data$National.accounts.base.year
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
?grep
grep("2012*", sampleTimes)
length(grep("2012*", sampleTimes))
length(grep("2012", sampleTimes))
which(grep("2012", sampleTimes))
grep("2012", sampleTimes)
sampleTimes(grep("2012", sampleTimes))
sampleTimes[grep("2012", sampleTimes)]
length(sampleTimes[grep("2012", sampleTimes)])
sampleTimes[grep("2012", sampleTimes)]
sm <- sampleTimes[grep("2012", sampleTimes)]
weekdays(sm)
weekdays(sm) == "সোমবার"
which(weekdays(sm) == "সোমবার")
length(which(weekdays(sm) == "সোমবার"))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="gdp.csv", method="curl")
gdp <- read.csv("gdp.csv")
head(gdp)
gdp <- read.csv("gdp.csv", skip=4, header=TRUE)
head(gdp)
gdp <- gdp[,c(1,2,4)]
head(gdp)
colnames(gdp) <- c("country_code", "rank", "country")
head(gdp)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="edu.csv", method="curl")
edu <- read.csv("edu.csv")
head(edu)
names(edu)
merge(gdp, edu, by.x="country_code", by.y="CountryCode")
merge_data <- merge(gdp, edu, by.x="country_code", by.y="CountryCode")
head(merge_data)
tail(merge_data)
names(merge_data)
merge_data$National.accounts.reference.year
merge_data$National.accounts.reference.year
merge_data$National.accounts.base.year
merge_data$National.accounts.reference.year
names(merge_data)
merge_data$PPP.survey.year
names(edu)
names(merge_data)
merge_data$National.accounts.reference.year
merge_data$National.accounts.base.year
grep("June$",merge_data$National.accounts.base.year)
grep("$June",merge_data$National.accounts.base.year)
grep("$[Jj]une",merge_data$National.accounts.base.year)
grep("[Jj]une$",merge_data$National.accounts.base.year)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="gdp.csv", method="curl")
gdp <- read.csv("gdp.csv")
head(gdp)
gdp <- read.csv("gdp.csv", skip=4, header=TRUE)
head(gdp)
head(gdp)
gdp <- gdp[,c(1,2,5)]
head(gdp)
head(gdp)
colnames(gdp) <- c("country_code", "rank", "gdp")
head(gdp)
str(gdp$gdp)
summary(gdp$gdp)
table(gdp$gdp)
gdp$gdp == ""
which(gdp$gdp == "")
gdp[which(gdp$gdp == ""),]
length(gdp[which(gdp$gdp == ""),])
which(gdp$gdp == ""),
which(gdp$gdp == "")
length(which(gdp$gdp == ""))
length(which(gdp$gdp == ".."))
gdp$gdp != "" & gdp$gdp != ".."
which(gdp$gdp != "" & gdp$gdp != "..")
gdp[which(gdp$gdp != "" & gdp$gdp != "..")]
gdp[which(gdp$gdp != "" & gdp$gdp != ".."),]
gdp_clean <- gdp[which(gdp$gdp != "" & gdp$gdp != ".."),]
head(gdp_clean)
gsub(",""",gdp_clean$gdp)
gsub(",","",gdp_clean$gdp)
as.numeric(gsub(",","",gdp_clean$gdp))
mean(as.numeric(gsub(",","",gdp_clean$gdp)))
gdp
head(gdp)
gdp_clean
gdp_clean$rank != ""
which(gdp_clean$rank != "")
gdp_clean[which(gdp_clean$rank != ""),]
gdp_clean <- gdp_clean[which(gdp_clean$rank != ""),]
head(gdp_clean)
mean(as.numeric(gsub(",","",gdp_clean$gdp)))
